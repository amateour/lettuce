{"version":3,"file":"index.es.mjs","mappings":"mBAgDO,SAASA,EAAUC,GACxB,MAAsB,kBAARA,EAOT,IAAMC,EAAW,IAAIC,IAC5BD,EAASE,IAAI,SAjDN,SAAiBH,GACtB,OAAOI,MAAMC,QAAQL,MAiDvBC,EAASE,IAAI,UA9BN,SAAkBH,GACvB,MAAsB,iBAARA,KA8BhBC,EAASE,IAAI,UArBN,SAAkBH,GACvB,MAAsB,iBAARA,KAqBhBC,EAASE,IAAI,UA1CN,SAAkBH,GACvB,OAAOA,aAAeM,UA0CxBL,EAASE,IAAI,UAAWJ,I","sources":["webpack://@amateury/lettuce/./src/help.ts"],"sourcesContent":["export type TIsValidate = (elm: any) => boolean;\n\n/**\n * validate if it is an array\n *\n * @param elm - element validation\n * @returns boolean\n */\nexport function isArray(elm: any): boolean {\n  return Array.isArray(elm);\n}\n\n/**\n * validate if it is an objet\n *\n * @param elm - element validation\n * @returns boolean\n */\nexport function isObject(elm: any): boolean {\n  return elm instanceof Object;\n}\n\n/**\n * validate if it is an string\n *\n * @param elm - element validation\n * @returns boolean\n */\nexport function isString(elm: any): boolean {\n  return typeof elm === \"string\";\n}\n\n/**\n * validate if it is a number\n *\n * @param elm - element validation\n * @returns boolean\n */\nexport function isNumber(elm: any): boolean {\n  return typeof elm === \"number\";\n}\n\n/**\n * validate if it is a number\n *\n * @param elm - element validation\n * @returns boolean\n */\nexport function isBoolean(elm: any): boolean {\n  return typeof elm === \"boolean\";\n}\n\n/**\n * Functions validations (isArray, isString)\n *\n */\nexport const validate = new Map<string, TIsValidate>();\nvalidate.set(\"Array\", isArray);\nvalidate.set(\"String\", isString);\nvalidate.set(\"Number\", isNumber);\nvalidate.set(\"Object\", isObject);\nvalidate.set(\"Boolean\", isBoolean);\n"],"names":["isBoolean","elm","validate","Map","set","Array","isArray","Object"],"sourceRoot":""}